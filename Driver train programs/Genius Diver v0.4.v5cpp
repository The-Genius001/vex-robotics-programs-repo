{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor back_left_motor = motor(PORT2, ratio18_1, false);\n\nmotor back_right_motor = motor(PORT1, ratio18_1, true);\n\ncontroller Controller1 = controller(primary);\nmotor front_left_motor = motor(PORT4, ratio18_1, false);\n\nmotor front_right_motor = motor(PORT6, ratio18_1, true);\n\nmotor flywheel = motor(PORT8, ratio18_1, false);\n\ncontroller Controller2 = controller(partner);\ndigital_out DigitalOutB = digital_out(Brain.ThreeWirePort.B);\nmotor Intake = motor(PORT13, ratio18_1, false);\n\nmotor roller = motor(PORT7, ratio18_1, false);\n\noptical Optical9 = optical(PORT9);\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller2RightShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller2\nint rc_auto_loop_function_Controller2() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonR1/ButtonR2 status to control flywheel\n      if (Controller2.ButtonR1.pressing()) {\n        flywheel.spin(forward);\n        Controller2RightShoulderControlMotorsStopped = false;\n      } else if (Controller2.ButtonR2.pressing()) {\n        flywheel.spin(reverse);\n        Controller2RightShoulderControlMotorsStopped = false;\n      } else if (!Controller2RightShoulderControlMotorsStopped) {\n        flywheel.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller2RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {    }                                                    */\n/*    Description:  a program for a robot                                     */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <algorithm>\n#include <cmath>\n#include <iostream>\n// Allows for easier use of the VEX Library\nusing namespace vex;\nvoid conNotes(char title[], char info[]);\n//!!!! make sure that all perimeters are declaired on any functions printing to the a screen or console!!!!\nint main() {\n  // setting flywheel settings\n  flywheel.setVelocity(700.0, rpm);\n  flywheel.setMaxTorque(120.0, percent);\n  flywheel.setStopping(coast);\n  Optical9.setLight(ledState::on);\n  Optical9.setLightPower(100, percent);\n\n  // telling me that the program got here and has started\nprintf(\"test...\");\nprintf(\"/n\");\n  // setting the pnumatics system \n    DigitalOutB.set(true);\n\n\n// setting intake settings\n  Intake.setVelocity(700.0, rpm);\n  Intake.setMaxTorque(120.0, percent);\n  Intake.setStopping(brake);\n  back_left_motor.setStopping(hold);\n  back_right_motor.setStopping(hold);\n  front_left_motor.setStopping(hold);\n  front_right_motor.setStopping(hold);\n\n  while(true) {\n        void conNotes(char title[], char info[]);\n        //void flywheeltemp();\n        void writeStats();\n        writeStats();\n        //controller values\n        double controllerAx3 = (double)(Controller1.Axis3.position(pct));\n        double controllerAx4 = (double)(Controller1.Axis4.position(pct));\n        //Get the raw sums of the X and Y joystick axes\n        double front_left  = controllerAx3 + controllerAx4;\n        double back_left   = controllerAx3 - controllerAx4;\n        double front_right = controllerAx3 - controllerAx4;\n        double back_right  = controllerAx3 + controllerAx4;\n        \n        //Find the largest possible sum of X and Y\n        double max_raw_sum = (double)(abs(Controller1.Axis3.position(pct)) + abs(Controller1.Axis4.position(pct)));\n        \n        //Find the largest joystick value\n        double max_XYstick_value = (double)(std::max(abs(Controller1.Axis3.position(pct)),abs(Controller1.Axis4.position(pct))));\n        \n        //The largest sum will be scaled down to the largest joystick value, and the others will be\n        //scaled by the same amount to preserve directionality\n        if (max_raw_sum != 0) {\n            front_left  = front_left / max_raw_sum * max_XYstick_value;\n            back_left   = back_left / max_raw_sum * max_XYstick_value;\n            front_right = front_right / max_raw_sum * max_XYstick_value;\n            back_right  = back_right / max_raw_sum * max_XYstick_value;\n        }\n        \n        //Now to consider rotation\n        //Naively add the rotational axis\n        front_left  = front_left  + Controller1.Axis1.position(pct);\n        back_left   = back_left   + Controller1.Axis1.position(pct);\n        front_right = front_right - Controller1.Axis1.position(pct);\n        back_right  = back_right  - Controller1.Axis1.position(pct);\n        \n        //What is the largest sum, or is 100 larger?\n        max_raw_sum = std::max(std::abs(front_left),std::max(std::abs(back_left),std::max(std::abs(front_right),std::max(std::abs(back_right),100.0))));\n        \n        //Scale everything down by the factor that makes the largest only 100, if it was over\n        front_left  = front_left  / max_raw_sum * 100.0;\n        back_left   = back_left   / max_raw_sum * 100.0;\n        front_right = front_right / max_raw_sum * 100.0;\n        back_right  = back_right  / max_raw_sum * 100.0;\n        // deadzone calculations\n\n\n\n        //Write the manipulated values out to the motors\n         front_left_motor.spin(fwd,front_left, velocityUnits::pct);\n          back_left_motor.spin(fwd,back_left,  velocityUnits::pct);\n          front_right_motor.spin(fwd,front_right,velocityUnits::pct);\n         back_right_motor.spin(fwd,back_right, velocityUnits::pct);\n\n         // numatic controlls\n       if (Controller2.ButtonY.pressing()){\n        void pnumatics();\n        thread thread0 = thread(pnumatics);\n\n       }\n       void Roller();\n       void controllerr();\n       void Flywheel();\n       thread thread1 = thread(controllerr);\n       thread thread2 = thread(Roller);\n       thread thread3 = thread(Flywheel);\n      \n      \n      \n      \n      \n         //if (flywheel.temperature(percent)==70)){\n         // notes(\"!!flywheel is hot!! \")\n       //  }\nvoid intake();\nintake();\n\n\nprintf(\"running...\");\nprintf(\"/n\");\n    }\n}\n//void notes(info){\n\n\n//}\n// pnumatics\nvoid pnumatics(){\n  DigitalOutB.set(false);\n\n  wait(0.9, seconds);\n  DigitalOutB.set(true);\n \n}\n\nvoid intake(){\n\n  if (Controller1.ButtonL1.pressing()){\n    Intake.spin(forward, 20.0, volt);\n  }\n  else if (Controller1.ButtonL2.pressing()){\n    Intake.spin(reverse, 20.0, volt);\n  }\n  else{\n    Intake.stop();\n  }\n\n}\nvoid Flywheel(){\n  if (Controller2.ButtonR1.pressing()){\n    flywheel.spin(forward, 20.0, volt);\n  }\n  else if (Controller2.ButtonR2.pressing()){\n    flywheel.spin(reverse, 20.0, volt);\n  }\n  else{\n    flywheel.stop();\n  }\n\n}\nvoid Roller(){\nif (Controller2.ButtonL1.pressing()){\n    roller.spin(forward, 20.0, volt);\n  }\n  else if (Controller2.ButtonL2.pressing()){\n    roller.spin(reverse, 20.0, volt);\n  }\n  else{\n    roller.stop();\n  }\n\n\n}\nvoid controllerr(){\nController2.Screen.clearScreen();\n Controller2.Screen.setCursor(1, 1);\n Controller2.Screen.print(\"temp:\");\n Controller2.Screen.print(flywheel.temperature(percent));\nController2.Screen.setCursor(2,1);\nController2.Screen.print(\"RPM:\");\nController2.Screen.print(flywheel.velocity(rpm));\nController2.Screen.setCursor(1,12);\nController1.Screen.clearScreen();\nController1.Screen.setCursor(1,1);\nController2.Screen.setCursor(3,1);\nController2.Screen.print(Optical9.color());\nwa\n}\n// write notifactions to controller screen\nvoid conNotes(char title[], char info[]){\n  Controller1.rumble(\"- - -\");\n  Controller1.Screen.clearScreen();\n  Controller1.Screen.setCursor(1, 1);\n  Controller1.Screen.print(\"------notifacations------\");\n  Controller1.Screen.setCursor(2,1);\n  Controller1.Screen.print(title);\n  Controller1.Screen.setCursor(3,1);\n  Controller1.Screen.print(info);\n  \n\n}\n// write things to console\nvoid consoleOut(char out[]){\n  printf(\"out\");\n}\n\n// write stats to brain\nvoid writeStats(){\n  \n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"stats\");\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.print(\"temp:\");\n    Brain.Screen.print(flywheel.temperature(percent));\n    Brain.Screen.setCursor(4,1);\n    Brain.Screen.print(\"rmp:\");\n    Brain.Screen.print(flywheel.velocity(rpm));\n    \n}\n// check flywheel temp\n\n\n// controller voids\n//void  Controller1.ButtonUp.pressed(callback){}\n\n  //flywheel.spin(forward);\n//}\n//oid onevent_Controller1buttonL1_realesed_0() {\n  //flywheel.stop();\n//}\n","textLanguage":"cpp","rconfig":[{"port":[2],"name":"back_left_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"back_right_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[4],"name":"front_left_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"front_right_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[],"name":"Controller2","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"flywheel","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"DigitalOutB","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[13],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"roller","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[9],"name":"Optical9","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}